DECLARATIVA E IMPERACTICA.




Codigo para realizar un sort a una lista con una condicion lambda.

List<String> lista = new ArrayList<>();
	lista.add("Juan");
	lista.add("Diego");
	lista.add("Sebastian");
    	
	for(String elemento: lista){
	System.out.println(elemento);
	}
	
	
	
Codigo para realizar impresion de una lista con un metodo funcional de java 8

	//En expresion lambda
	lista.forEach(x -> System.out.println(x));

	//En expresion funcional
	lista.forEach(System.out::println);

Este es para ordenar con un sort
	//lambda
	Collections.sort(lista, (String p1, String p2) -> p1.compareTo(p2));      
	//Funcional
	lista.sort((x,y) -> x.compareTo(y));
	
	o tambien se pude realizar 
	
	Arrays.sort(nombres, String::compareToIgnoreCase);

y este es para remover cumpliendo alguna condicion

	lista.removeIf(x -> x.equalsIgnoreCase("Juan"));
	
	
Estos son metodos funcionales de java 8 para simplicar el codigo, tambien los podemos usar con expresiones
lambda como lo hice en el prrimer ejemplo.


De esta forma podemos referencia una clase A que contien la clase B y solo llamar el metodo y enviar los parametros.
(Ejemplo MetodosReferenciadosApp)

iPersona iper3 = Persona::new;
Persona per = iper3.crear(1, "Sebastian");





STREAM

Como podemos filtrar o poner una condicion en una lista usando stream y filter e imprimirlo con la funcion 
foreach llamandolo como metodo de referencia

lista.stream().filter(x -> x.startsWith("J")).forEach(System.out::println);

Ordenar en Forma Ascendente
	lista.stream().sorted().forEach(System.out::println);
		
Ordenar en Forma Descendente
	lista.stream().sorted((x,y) -> y.compareTo(x)).forEach(System.out::println);

	
transformar o convertir, en este caso el ejemplo convierte toda la lista a mayusculas.
		lista.stream().map(String::toUpperCase).forEach(System.out::println);
	
hacer suma de toda una lista

	lista.stream().reduce(Integer::sum);
	
	
A stream provides a fluent API for transforming values and performing some action on the results. Stream operations 
are either "intermediate" or "terminal".

Intermediate - An intermediate operation keeps the stream open and allows further operations to follow. 
The filter and map methods in the example above are intermediate operations. The return type of these
methods is Stream; they return the current stream to allow chaining of more operations.
Terminal - A terminal operation must be the final operation invoked on a stream. Once a terminal 
operation is invoked, the stream is "consumed" and is no longer usable. The sum method in the example
above is a terminal operation.

	
int sumOfWeights = blocks.stream().filter(b -> b.getColor() == RED)
                                  .mapToInt(b -> b.getWeight())
                                  .sum();	
                                  
List<String> strings = Arrays.asList("a", "b", "c");
strings.stream()                    // Stream<String>
       .mapToInt(String::length)    // IntStream
       .longs()                     // LongStream
       .mapToDouble(x -> x / 10.0)  // DoubleStream
       .boxed()                     // Stream<Double>
       .mapToLong(x -> 1L)          // LongStream
       .mapToObj(x -> "")           // Stream<String>
       ...
          
List<String> strings = values.stream()
                             .filter(...)
                             .map(...)
                             .collect(Collectors.toList());
                                                     
Intermediate operations:

    filter 1 - Exclude all elements that don't match a Predicate.
    map 1 2 3 4 - Perform a one-to-one transformation of elements using a Function.
    flatMap 1 2 3 4 - Transform each element into zero or more elements by way of another Stream.
    peek 1 - Perform some action on each element as it is encountered. Primarily useful for debugging.
    distinct 1 - Exclude all duplicate elements according to their .equals behavior. This is a stateful operation.
    sorted 1 2 - Ensure that stream elements in subsequent operations are encountered according to the order imposed by a Comparator. This is a stateful operation.
    limit 1 - Ensure that subsequent operations only see up to a maximum number of elements. This is a stateful, short-circuiting operation.
    skip 1 - Ensure that subsequent operations do not see the first n elements. This is a stateful operation.

Terminal operations:

    forEach 1 - Perform some action for each element in the stream.
    toArray 1 2 - Dump the elements in the stream to an array.
    reduce 1 2 3 - Combine the stream elements into one using a BinaryOperator.
    collect 1 2 - Dump the elements in the stream into some container, such as a Collection or Map.
    min 1 - Find the minimum element of the stream according to a Comparator.
    max 1 - Find the maximum element of the stream according to a Comparator.
    count 1 - Find the number of elements in the stream.
    anyMatch 1 - Find out whether at least one of the elements in the stream matches a Predicate. This is a short-circuiting operation.
    allMatch 1 - Find out whether every element in the stream matches a Predicate. This is a short-circuiting operation.
    noneMatch 1 - Find out whether zero elements in the stream match a Predicate. This is a short-circuiting operation.
    findFirst 1 - Find the first element in the stream. This is a short-circuiting operation.
    findAny 1 - Find any element in the stream, which may be cheaper than findFirst for some streams. This is a short-circuiting operation.

		
STREAM PARALELO

	numeros.parallelStream().forEach(System.out::println);
	
	double total=lista.stream().parallel().filter(elemento->(elemento>200)).mapToDouble(elemento->elemento*1.21).sum();
	
	

USO DE MAP

LLENADO

	private Map<Integer, String> map;
	
	public void llenar(){
		map = new HashMap<>();
		map.put(1, "Juan Diego");
		map.put(2, "Sebastian");
		map.put(3, "Jose Ignacio");
		map.put(4, "Adrian Maria");
	}

IMPRIMIR VALORES

	map.entrySet().stream().forEach(System.out::println);

PONER SI NO EXISTE

	map.putIfAbsent(5, "Karine");
	
HACER SI EXISTE
	map.computeIfPresent(3, (k,v)-> k + v);
	
OBTENER VALOR Y SI NO EXISTE PONER POR DEFAULT
	String valor = map.getOrDefault(6, "Valor por defecto");
	
RECOLECTAR CON CONDICION DE UN MAPA A OTRO

	public void recolectar(){
		Map<Integer, String> mapaRecolectado = map.entrySet().stream()
				.filter(e->e.getValue().contains("J"))
				.collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));
				
		mapaRecolectado.forEach((k,v) -> System.out.println("LLave " + k + " Valor " + v));
	}
	
	
	
	
DATE API

Tomar los milisegundo y compararlos, tambien se puede hacer en segundo y horas.
		Instant ini = Instant.now();
		Thread.sleep(1000);			
		Instant fin = Instant.now();
		System.out.println(Duration.between(ini, fin));
		System.out.println(Duration.between(ini, fin).toMillis());
		
COMPARAR DOS FECHAS Y TOMAR SUS PERIODOS

	LocalDate nacimiento = LocalDate.of(1996, 3, 4);
	LocalDate actual = LocalDate.now();
	
	Period periodo = Period.between(nacimiento, actual);
	System.out.println("Han pasado " + periodo.getYears() + " años, "
			+ "" + periodo.getMonths() + " meses y " + periodo.getDays()+" días.");
						
						
CONVERTIR O DARLE FORMATO A UNA FECHA

			String fecha = "04/03/1996";
			DateTimeFormatter formateador = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDate fechaLocal = LocalDate.parse(fecha, formateador);
			System.out.println(fechaLocal);
			System.out.println(formateador.format(fechaLocal));			
			formateador = DateTimeFormatter.ofPattern("ddMMyyyy");
			System.out.println(formateador.format(fechaLocal));
			
			


FUNCION DE ALTO ORDEN:

DONDE PODEMOS EN UN METODO LLAMAR VARIAS FUNCIONES COMO UN CONSUMER Y DENTRO DE LA MISMA
LLAMAR UN PREDICATE QUE NOS DEFINA UN PROCESO LOGICO.

ESTO SE PUEDE VER EN AltoOrdenApp

public void filtrar(List<String> lista, Consumer<String> consumidor, int longitud, String cadena){
		lista.stream().filter(this.establecerLogica(cadena)).forEach(consumidor);
	}
	
	
		public Predicate<String> establecerLogica(int longitud){
		return texto -> texto.length() < longitud;
	}
	
	public Predicate<String> establecerLogica(String cadena){
		return texto -> texto.contains(cadena);
	}
	
	List<String> lista = new ArrayList<String>();
		lista.add("Juan");
		lista.add("Sebastian");
		lista.add("Jose");
		lista.add("Adriana");
		//app.filtrar(lista, System.out::println, 5, null);
		app.filtrar(lista, System.out::println, 0, "J");
		
		
		
Y TAMBIEN SE PUEDE USAR PARA RECIBIR UNA FUNCION Y SACAR UNA RESPUESTA.


	private Function<String, String> convertirMayusculas = x -> x.toUpperCase();
	private Function<String, String> convertirMinusculas = x -> x.toLowerCase();
	
	public void imprimir(Function<String, String> funcion, String valor){		
		System.out.println(funcion.apply(valor));
	}
	
	
	app.imprimir(app.convertirMayusculas, "cadena en minuscula");
	app.imprimir(app.convertirMinusculas, "CADENA EN MAYUSCULAS");
		
		
	public Function<String, String> mostrar(String mensaje){	
		return (String x) -> mensaje + x;
	}
	
		
	String respuesta = app.mostrar("Hola ").apply("Mensaje Salida");
	System.out.println(respuesta);
			
			
			
			
			
OPTIONAL 

		Optional.ofNullable(cadena1);
		
		Optional<Integer>  c = Optional.empty();
		c.ofNullable(cadena1);		
		
		Optional<Integer>  b = Optional.ofNullable(valor2);		
		
		System.out.println(a.isPresent());
				
		Integer valor2 = b.orElse(0);
		
		
		Optional<OBJETO> perona = Optional.ofNullable(valoX);
		return persona.orElse(new persona(x,x,x,x,x));
		
	
			
			
LOGGER


	/*Tipos de alertas de importancia alta.
    LOGGER.severe("Severe");
    LOGGER.info("Info");
    LOGGER.warning("Warning");
    LOGGER.log(Level.SEVERE, "Severe 2");
    LOGGER.log(Level.INFO, "Info 2");
    LOGGER.log(Level.WARNING, "Warning 2");
    
    Tipos de alerta de importancia baja, para que este tipo de alertas tambien salga debemos 
    configurar el archivo ubicado en: C:\Program Files (x86)\Java\jdk1.7.0_51\jre\lib\logging.properties
    y agregar al final de la linea el nombre del Logger y el nivel All: "Mylogger.level = ALL"
    asi todos los logger que tengan este nombre o sean de esta clase van a funcionar tambien los mensajes
    de baja importancia.       
    
    LOGGER.setLevel(Level.ALL);
    LOGGER.config("Config");
    LOGGER.fine("Fine");
    LOGGER.finer("Finer");*/        
    
	/*Podemos darle un nombre para decir que este logger pertenece a una clase especifica,
	y asi en el archivo logger podremos definirle si este tipo de Logger tomara tambien mensajes
	con importancia baja*/
	
	private final static Logger LOGGER = Logger.getLogger("Mylogger");
	
	//o podemos usar este tipo de looger para decir que hace referencia a esa clase
	
	private final static Logger LOGGER1 = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	private final static Logger LOGGER2 = Logger.getLogger(CompletableFuture14.class.getName());	
			
			
			
			
COMPLETABLE FUTURE 


	 ----------------- run y supply (y runAsync y supplyAsync)	
	
	Este solo ejecuta una operacion.
	CompletableFuture<Void> runAsync = CompletableFuture.runAsync(() -> System.out.println("running async task"), service);
	
	Este ejecuta una operacion pero tiene un valor de retorno.
	CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> tareaSimulada(1, "Final Result"));
	
	
	
	 ----------------- thenApply: 
	para transformar futuros. La idea es pasarle una función lambda que transforme el resultado del primero.
	
	 ----------------- thenApplyAsync
	 
	CompletableFuture<String> futureApply = futureAsync.thenApplyAsync(s -> {
		//System.out.println("Comenzando applyAsync...");
	    LOGGER.info("Comenzando applyAsync...");
	    Sleep.sleepSeconds(2);	
	    LOGGER.info("Terminado applyAsync!");
	    return s.toUpperCase();
	}, executor);
	
	
	 ----------------- thenAccept y thenRun
	muy similares al whenComplete, ejecutaran el lambda una vez se complete el futuro. 
	El primero recibe un resultado, y el segundo no. Son equivalentes al supplyAsync y runAsync respectivamente.
	
	CompletableFuture<Void> future = nombreCompletableParaEximanar.thenAccept(s -> System.out.println("Valor de retorno: " + s));
	
	thenAcceptAsync
	
	futureAsync.thenAcceptAsync(s -> { 
		    LOGGER.info("Comenzando thenAccept...");
		    Sleep(2);
		    LOGGER.info("Terminado thenAccept!");
		    LOGGER.info("Resultado: {}" + s);
		}, executor);	
		
	thenRunAsync
	
	futureRun.thenRunAsync(() -> {
	    LOGGER.info("Comenzando thenRun...");
	    Sleep.sleepSeconds(2);
	    LOGGER.info("Terminado thenRun!");
	}, executor);
	
	----------------- thenAcceptBothAsync
	
	future1.thenAcceptBothAsync(future2, (s1, s2) ->
        LOGGER.info("En el thenAcceptBoth, recibidos results: {}, {}"+ s1+ s2)
    	, executor);    	
	
	----------------- runAfterBothAsync
	
	future1.runAfterBothAsync(future2, () -> LOGGER.info("En el runAfterBoth, futuros terminados.")
	        , executor);
    	
	 ----------------- completedFuture
	
	String expectedValue = "the expected value";
	CompletableFuture<String> alreadyCompleted = CompletableFuture.completedFuture(expectedValue);
	
			
	COMBINE
	
	En este caso, en lugar de una cadena de futuros, espera a que terminen dos futuros, para luego hacer algo. 
	En este caso la lambda tendrá dos parámetros, que son el resultado de cada uno de los dos futuros:
	
	 ----------------- thenCombineAsync
	
	CompletableFuture<String> primeraTarea = CompletableFuture.supplyAsync(tareaSimulada(3, "Combinar"));
	CompletableFuture<String> segundaTarea = CompletableFuture.supplyAsync(tareaSimulada(2, "todas las tareas"));
	CompletableFuture<String> tareasCombinadas = primeraTarea.thenCombineAsync(segundaTarea, (f, s) -> f + " " + s);	
	
	CompletableFuture<String> finalStage = stage7.thenCombineAsync(stage8,(s1,s2)-> s1+s2);
	
	
	----------------- thenCombine
	
	CompletableFuture<String> completableAsincrono = CompletableFuture.supplyAsync(tareaSimulada("valor calculado"));
	CompletableFuture<String> CompletableConElValor = CompletableFuture.completedFuture("valor conocido");
	CompletableFuture<String> combined = completableAsincrono.thenCombine(CompletableConElValor, resultadoCalculo);
	
	----------------- thenComposeAsync
	
	CompletableFuture<Integer> resultado = obtenerNumeros.thenComposeAsync(suma, service);

	  CompletableFuture<String> fCompose = future1.thenComposeAsync(s -> CompletableFuture.supplyAsync(() -> {
            LOGGER.info("Comenzando thenCompose...");
            Sleep.sleepSeconds(2);
            LOGGER.info("Terminado thenCompose!");
            return s.concat(" + Terminado thenCompose");
        }, executor),
        executor);
        
    fCompose.whenCompleteAsync((s, e) -> LOGGER.info("Resultado thenCompose: {}"+ s), executor);
			
			
	----------------- runAfterBothAsync	
	
	thenAcceptBoth y runAfterBoth: Muy similares al ‘thenCombine’, excepto que no generan un nuevo futuro, 
	simplemente ejecutan la lambda cuando los dos futuros terminen. Es como un ‘whenComplete‘ pero esperando dos futuros:
	
	CompletableFuture<Void> finisher = "futuro1".runAfterBothAsync("futuro2",() -> results. add(results.get(0)+ "&"+results.get(1)));	
			
	----------------- acceptEither	
		
	acceptEither y runAfterEither: En algunos casos en que tengamos dos futuros nos interesará hacer algo cuando uno 
	de los dos termine, el primero que lo haga. Para eso están estos dos métodos.	
	
	CompletableFuture<Void> collector = tarea1.acceptEither(tarea2, results::add);	
	
	----------------- acceptEitherAsync
	
	future1.acceptEitherAsync(future2, (s) -> LOGGER.info("En el acceptEither, recibido el primer resultado: {}"+ s)
        	, executor);
	
	----------------- runAfterEitherAsync
		
	CompletableFuture<Void> finisher = run1.runAfterEitherAsync(run2,() -> results.add(results.get(0).toUpperCase()));
	
	future1.runAfterEitherAsync(future2, () -> LOGGER.info("En el runAfterEither, primero terminado.")
                , executor);
	
	----------------- whenCompleteAsync
	
	futureApply.whenCompleteAsync((s, e) -> LOGGER.info("Resultado applyAsync: {}" + s) );
	
	
	----------------- exceptionally
	
	CompletableFuture<String> futureAsync = CompletableFuture.supplyAsync(() -> {
	    LOGGER.info("Comenzando supplyAsync with exception...");
	    Sleep(2);
	    LOGGER.info("Terminado supplyAsync with exception!");
	    throw new RuntimeException("Error en el futuro");
	    //return "bueno";
	}, executor);
	 
	CompletableFuture<String> futureEx = futureAsync.exceptionally(e -> {
	    LOGGER.warning("Resultado con excepción!!");
	    return "Entro a la excepcion.";
	});
	
	
	----------------- handleAsync
	handle: registra un callback para gestionar el resultado o excepción. Recibe una lambda que tiene dos parámetros, 
	el resultado y la excepción. Si la excepción no es nula, es que ha habido una excepción. 
	También	deber retornar un valor del tipo del futuro que lanzo la excepción.
	 
	CompletableFuture<String> futureAsync = CompletableFuture.supplyAsync(() -> {
	    LOGGER.info("Comenzando supplyAsync con exception...");
	    Sleep(2);
	    LOGGER.info("Terminado supplyAsync con exception!");
	    throw new RuntimeException("Error en el futuro");
	}, executor);
	 
	CompletableFuture<String> handledFuture = futureAsync.handleAsync((s, e) -> {
	    if (e != null) {
	        LOGGER.severe("Resultado con excepción!! "+ e);
	        return "StringPorDefecto";
	    } else {
	        LOGGER.info("Resultado: {}"+ s);
	        return s;
	    }
	}, executor);
	
	----------------- allOf
	CompletableFuture<Void> all = CompletableFuture.allOf(future1, future2, future3);
	all.whenCompleteAsync((s, e) -> LOGGER.info("Resultado all: {}"+ s), executor);*/
	    
	    
	----------------- anyOf
	
    CompletableFuture<Object> all = CompletableFuture.anyOf(future1, future2, future3);
    all.whenCompleteAsync((s, e) -> LOGGER.info("Resultado any: {}"+ s), executor);
	
	
	Sleep.sleepSeconds
	
	
	
	
Method reference 	  	Equivalent lambda expression
String::valueOf 		x -> String.valueOf(x)
Object::toString 		x -> x.toString()
x::toString 		() -> x.toString()
ArrayList::new 		() -> new ArrayList<>()
			
		

Function<T, R> - take a T as input, return an R as ouput
Predicate<T> - take a T as input, return a boolean as output
Consumer<T> - take a T as input, perform some action and don't return anything
Supplier<T> - with nothing as input, return a T
BinaryOperator<T> - take two T's as input, return one T as output, useful for "reduce" operations
			
			
			
			
			
MAS DOCUMENTACION 


------Predicates

Predicates are boolean-valued functions of one argument. The interface contains various default methods for 
composing predicates to complex logical terms (and, or, negate)

Predicate<String> predicate = (s) -> s.length() > 0;

predicate.test("foo");              // true
predicate.negate().test("foo");     // false

Predicate<Boolean> nonNull = Objects::nonNull;
Predicate<Boolean> isNull = Objects::isNull;

Predicate<String> isEmpty = String::isEmpty;
Predicate<String> isNotEmpty = isEmpty.negate();


------Functions

Functions accept one argument and produce a result. Default methods can be used to chain 
multiple functions together (compose, andThen).

Function<String, Integer> toInteger = Integer::valueOf;
Function<String, String> backToString = toInteger.andThen(String::valueOf);

backToString.apply("123");     // "123"


------Suppliers

Suppliers produce a result of a given generic type. Unlike Functions, Suppliers don't accept arguments.

Supplier<Person> personSupplier = Person::new;
personSupplier.get();   // new Person

------Consumers

Consumers represents operations to be performed on a single input argument.

Consumer<Person> greeter = (p) -> System.out.println("Hello, " + p.firstName);
greeter.accept(new Person("Luke", "Skywalker"));

------Comparators

Comparators are well known from older versions of Java. Java 8 adds various default methods to the interface.

Comparator<Person> comparator = (p1, p2) -> p1.firstName.compareTo(p2.firstName);

Person p1 = new Person("John", "Doe");
Person p2 = new Person("Alice", "Wonderland");

comparator.compare(p1, p2);             // > 0
comparator.reversed().compare(p1, p2);  // < 0

------Optionals

Optionals are not functional interfaces, instead it's a nifty utility to prevent NullPointerException. It's an important concept for the next section, so let's have a quick look at how Optionals work.

Optional is a simple container for a value which may be null or non-null. Think of a method which may return a non-null result but sometimes return nothing. Instead of returning null you return an Optional in Java 8.

Optional<String> optional = Optional.of("bam");

optional.isPresent();           // true
optional.get();                 // "bam"
optional.orElse("fallback");    // "bam"

optional.ifPresent((s) -> System.out.println(s.charAt(0)));     // "b"



------MAS DE STREAM


------Streams

A java.util.Stream represents a sequence of elements on which one or more operations can be performed. 
Stream operations are either intermediate or terminal. While terminal operations return a result of a 
certain type, intermediate operations return the stream itself so you can chain multiple method calls
 in a row. Streams are created on a source, e.g. a java.util.Collection like lists or sets (maps are
  not supported). Stream operations can either be executed sequential or parallel.

Let's first look how sequential streams work. First we create a sample source in form of a list of strings:

List<String> stringCollection = new ArrayList<>();
stringCollection.add("ddd2");
stringCollection.add("aaa2");
stringCollection.add("bbb1");
stringCollection.add("aaa1");
stringCollection.add("bbb3");
stringCollection.add("ccc");
stringCollection.add("bbb2");
stringCollection.add("ddd1");

Collections in Java 8 are extended so you can simply create streams either by calling Collection.stream()
 or Collection.parallelStream(). The following sections explain the most common stream operations.
Filter

Filter accepts a predicate to filter all elements of the stream. This operation is intermediate which 
enables us to call another stream operation (forEach) on the result. ForEach accepts a consumer to be
executed for each element in the filtered stream. ForEach is a terminal operation. It's void, so we
cannot call another stream operation.

stringCollection
    .stream()
    .filter((s) -> s.startsWith("a"))
    .forEach(System.out::println);

// "aaa2", "aaa1"

Sorted

Sorted is an intermediate operation which returns a sorted view of the stream. The elements are sorted 
in natural order unless you pass a custom Comparator.

stringCollection
    .stream()
    .sorted()
    .filter((s) -> s.startsWith("a"))
    .forEach(System.out::println);

// "aaa1", "aaa2"

Keep in mind that sorted does only create a sorted view of the stream without manipulating the 
ordering of the backed collection. The ordering of stringCollection is untouched:

System.out.println(stringCollection);
// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1

Map

The intermediate operation map converts each element into another object via the given function. 
The following example converts each string into an upper-cased string. But you can also use map
 to transform each object into another type. The generic type of the resulting stream depends
  on the generic type of the function you pass to map.

stringCollection
    .stream()
    .map(String::toUpperCase)
    .sorted((a, b) -> b.compareTo(a))
    .forEach(System.out::println);

// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"

Match

Various matching operations can be used to check whether a certain predicate matches the stream.
All of those operations are terminal and return a boolean result.

boolean anyStartsWithA =
    stringCollection
        .stream()
        .anyMatch((s) -> s.startsWith("a"));

System.out.println(anyStartsWithA);      // true

boolean allStartsWithA =
    stringCollection
        .stream()
        .allMatch((s) -> s.startsWith("a"));

System.out.println(allStartsWithA);      // false

boolean noneStartsWithZ =
    stringCollection
        .stream()
        .noneMatch((s) -> s.startsWith("z"));

System.out.println(noneStartsWithZ);      // true

Count

Count is a terminal operation returning the number of elements in the stream as a long.

long startsWithB =
    stringCollection
        .stream()
        .filter((s) -> s.startsWith("b"))
        .count();

System.out.println(startsWithB);    // 3

Reduce

This terminal operation performs a reduction on the elements of the stream with the given function.
The result is an Optional holding the reduced value.

Optional<String> reduced =
    stringCollection
        .stream()
        .sorted()
        .reduce((s1, s2) -> s1 + "#" + s2);

reduced.ifPresent(System.out::println);
// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"

